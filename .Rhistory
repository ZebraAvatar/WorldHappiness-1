fig <- fig %>% add_trace(y = ~mean_econ, name = 'GDP')
fig <- fig %>% add_trace(y = ~mean_fam, name = 'Social Support')
fig <- fig %>% add_trace(y = ~mean_health, name = 'Life Expectancy')
fig <- fig %>% add_trace(y = ~mean_free, name = 'Freedom')
fig <- fig %>% add_trace(y = ~mean_gener, name = 'Generosity')
fig <- fig %>% add_trace(y = ~mean_trust, name = 'Trust')
fig <- fig %>% layout(yaxis = list(title = 'Score'), barmode = 'stack')
fig
})
#Correlation matrix
#setwd("C:\\Users\\svetl\\Documents\\Purdue MSBA\\Summer 2021\\MGMT 59000 Using R for Analytics\\Final Team Project\\WorldData_2")
#getwd()
wh_data <- readRDS("data\\wh_data.RDS")
output$indicator_corr <- renderPlot({
cor_matrix <- cor(wh_data[,3:9])
# cor_matrix <-do.call(cor,args=c(as.name(paste('wh_',input$corr_year,sep=''))[,3:9]))
ggcorrplot(cor_matrix, method = "circle", colors = c("red","pink","blue"))
})
wh_data
# Titles ------------------------------------------------------------------
output$compare_lines_title <-
renderUI({HTML(paste(
"<h2>Evolution of", current$indicator, "by year</h2>"
))})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
sliderInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
checkboxGroupInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
years
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
checkboxGroupInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
runApp()
wh_data <- wh_data[,input$corr_yr]
wh_data <- wh_data[,2017]
wh_data <- wh_data[,year=2017]
wh_data <- wh_data[,year==2017]
wh_data
cor_matrix <- cor(wh_data[,3:9])
wh_data <- wh_data[wh_data$year==2017]
wh_data <- wh_data[wh_data$year==2017]
wh_data <- subset(wh_data, wh_data$year=2017)
wh_data <- subset(wh_data, wh_data$year==2017)
wh_data <- filter(year==2017)
wh_data <- filter(year=2017)
wh_data <- wh_data %>% filter(wh_data, year=2017)
wh_data <- wh_data %>% filter(wh_data, years=2017)
output$indicator_corr <- renderPlot({
wh_data <- wh_data %>% filter(wh_data, year=2017)[,3:9]
cor_matrix <- cor(wh_data[,3:9])
ggcorrplot(cor_matrix, method = "circle", colors = c("red","pink","blue"))
})
wh_data <- wh_data %>% filter(wh_data, year=2017)[,3:9]
class(wh_data)
class(wh_data_top5)
wh_data_top5 <- as.data.frame(summarize(group_by(wh_data,country), mean_score=mean(score), mean_econ=mean(economy),mean_fam=mean(family),
mean_health=mean(health), mean_free=mean(freedom), mean_gener=mean(generosity),mean_trust=mean(trust),
mean_dystopia=mean(dystopia)))
wh_data_top5 <- wh_data_top5 %>% arrange(desc(mean_score)) %>% slice_head(n=5)
wh_data_top5 <- wh_data_top5 %>% select(country, mean_score, mean_econ, mean_fam, mean_health, mean_free, mean_gener,mean_trust, mean_dystopia)
runApp()
runApp()
class(wh_data)
runApp()
runApp()
runApp()
runApp()
wh_data <- as.data.frame(wh_data) %>% filter(wh_data, year=='2017')[,3:9]
cor_matrix <- cor(wh_data)
runApp()
wh_data <- as.data.frame(wh_data) %>% filter(wh_data, year=='2017')[,3:9]
wh_data_yr <- as.data.frame(wh_data) %>% filter(wh_data, year=='2017')
runApp()
runApp()
wh_data
wh_data_yr
wh_data_yr <- wh_data %>% filter(wh_data, year=='2017')
wh_data_yr <- wh_data_yr %>% select(score,economy,family,health,freedom, generosity,trust)
wh_data_yr
runApp()
wh_data_yr <- wh_data[which(wh_data$year=2017)]
wh_data_yr <- wh_data[which(wh_data$year==2017)]
wh_data_yr
# wh_data_yr <- wh_data %>% filter(wh_data, year==2017)
# wh_data_yr <- wh_data_yr %>% select(score,economy,family,health,freedom, generosity,trust)
cor_matrix <- cor(wh_data_yr)
wh_data_yr <- wh_data[which(wh_data$year==2017)][,3:9]
wh_data_yr
# wh_data_yr <- wh_data %>% filter(wh_data, year==2017)
# wh_data_yr <- wh_data_yr %>% select(score,economy,family,health,freedom, generosity,trust)
cor_matrix <- cor(wh_data_yr)
cor_matrix
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
sliderInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
sliderInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput(outputId="hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
library(ggplot2)
ggplot(data=data.frame(myx=rnorm(input$num)), aes(x=myx)) + geom_histogram()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
sliderInput(inputId = "stdev",
label = "Standard deviation",
value = 2, min = 1, max = 5),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(n=input$num, sd=input$stdev))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
#plotOutput("hist"),
dataTableOutput(outputId="ourdata")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
output$ourdata <- renderDataTable({
data.frame(dataset = rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
#plotOutput("hist"),
dataTableOutput(outputId="ourdata")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
output$ourdata <- renderDataTable({
data.frame(dataset = rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
# 06-observeEvent
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
min = 1, max = 100, value = 25),
actionButton(inputId = "go",
label = "Print Value")
)
server <- function(input, output) {
# observe responds to the print button
# but not the slider
observeEvent(input$go, {
print(as.numeric(input$num))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
sliderInput(inputId = "stdev",
label = "Standard deviation",
value = 2, min = 1, max = 5),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(n=input$num, sd=input$stdev))
})
}
shinyApp(ui = ui, server = server)
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
sliderInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
body_content[[length(body_content) + 1]] <-
tabItem(
"compare",
pickerInput(
inputId = "compare_select",
label = "",
choices = countries_list,
multiple = TRUE,
width = "100%",
options = list(
title = "Select multiple countries",
`live-search` = TRUE)
),
br(),
box(title="Correlation matrix for all years and all countries", solidHeader = T,
sliderTextInput(inputId='corr_yr',
label='Pick a year',
choices=years,
width ='100%'),
selectInput('country','Select a country',)
?selectInput
plotOutput("indicator_corr", height=400),width=5
# h2("Composition of score order by indicator"),
# plotlyOutput("compare_stakedbar"),
# sliderTextInput(
#   inputId = "compare_years",
#   label = "Pick a year:",
#   choices = years,
#   width = "100%"
# )),
),
box(title='Top 5 Happiest Countries- all years', solidHeader = T,plotlyOutput('top5', height=290), width=5),
#   column(width = 6,
#          h2("Top 5 Happiest Countries for all years"),
#          plotlyOutput("top5"))
#          # htmlOutput("compare_lines_title"),
#          # plotlyOutput("compare_lines"),
#          # switchbuttons_indicator(
#          # inputId = "compare_indicators"))
#
box(title='Bottom 5 Least Happy Countries- all years', solidHeader = T,plotlyOutput('bottom5', height=290), width=5)
)
body_content[[length(body_content) + 1]] <-
tabItem(
"compare",
pickerInput(
inputId = "compare_select",
label = "",
choices = countries_list,
multiple = TRUE,
width = "100%",
options = list(
title = "Select multiple countries",
`live-search` = TRUE)
),
br(),
box(title="Correlation matrix for all years and all countries", solidHeader = T,
sliderTextInput(inputId='corr_yr',
label='Pick a year',
choices=years,
width ='100%'),
selectInput('country','Select a country',)
?selectInput
plotOutput("indicator_corr", height=400),width=5
# h2("Composition of score order by indicator"),
# plotlyOutput("compare_stakedbar"),
# sliderTextInput(
#   inputId = "compare_years",
#   label = "Pick a year:",
#   choices = years,
#   width = "100%"
# )),
),
box(title='Top 5 Happiest Countries- all years', solidHeader = T,plotlyOutput('top5', height=290), width=5),
#   column(width = 6,
#          h2("Top 5 Happiest Countries for all years"),
#          plotlyOutput("top5"))
#          # htmlOutput("compare_lines_title"),
#          # plotlyOutput("compare_lines"),
#          # switchbuttons_indicator(
#          # inputId = "compare_indicators"))
#
box(title='Bottom 5 Least Happy Countries- all years', solidHeader = T,plotlyOutput('bottom5', height=290), width=5)
)
runApp()
runApp()
View(countries)
runApp()
class(countries)
runApp()
wh_data_yr <- wh_data[which(wh_data$year==input$corr_yr & wh_data$country==input$corr_country)][,3:9]
wh_data_yr <- wh_data[which(wh_data$year==input$corr_yr)][,3:9]
wh_data_yr <- wh_data[which(wh_data$year==input$corr_yr)][,3:9]
wh_data_yr <- wh_data[which(wh_data$year==2017)][,3:9]
wh_data_yr <- wh_data[which(wh_data$country=='Afghanistan' & wh_data$year==2018)][,3:9]
wh_data_yr
cor_matrix <- cor(wh_data_yr)
cor_matrix
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
